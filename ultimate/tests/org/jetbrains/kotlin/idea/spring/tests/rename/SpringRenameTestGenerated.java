/*
 * Copyright 2010-2016 JetBrains s.r.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.jetbrains.kotlin.idea.spring.tests.rename;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.kotlin.test.JUnit3RunnerWithInners;
import org.jetbrains.kotlin.test.KotlinTestUtils;
import org.jetbrains.kotlin.test.TestMetadata;
import org.junit.runner.RunWith;

import java.io.File;
import java.util.regex.Pattern;

/** This class is generated by {@link org.jetbrains.kotlin.generators.tests.TestsPackage}. DO NOT MODIFY MANUALLY */
@SuppressWarnings("all")
@TestMetadata("ultimate/testData/spring/core/rename")
@TestDataPath("$PROJECT_ROOT")
@RunWith(JUnit3RunnerWithInners.class)
public class SpringRenameTestGenerated extends AbstractSpringRenameTest {
    public void testAllFilesPresentInRename() throws Exception {
        KotlinTestUtils.assertAllTestsPresentInSingleGeneratedClass(this.getClass(), new File("ultimate/testData/spring/core/rename"), Pattern.compile("^(.+)\\.test$"));
    }

    @TestMetadata("javaSpelRefToJava/javaSpelRefToJava.test")
    public void testJavaSpelRefToJava_JavaSpelRefToJava() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("ultimate/testData/spring/core/rename/javaSpelRefToJava/javaSpelRefToJava.test");
        doTest(fileName);
    }

    @TestMetadata("javaSpelRefToJavaAnnotated/javaSpelRefToJavaAnnotated.test")
    public void testJavaSpelRefToJavaAnnotated_JavaSpelRefToJavaAnnotated() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("ultimate/testData/spring/core/rename/javaSpelRefToJavaAnnotated/javaSpelRefToJavaAnnotated.test");
        doTest(fileName);
    }

    @TestMetadata("javaSpelRefToKt/javaSpelRefToKt.test")
    public void testJavaSpelRefToKt_JavaSpelRefToKt() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("ultimate/testData/spring/core/rename/javaSpelRefToKt/javaSpelRefToKt.test");
        doTest(fileName);
    }

    @TestMetadata("javaSpelRefToKtAnnotated/javaSpelRefToKtAnnotated.test")
    public void testJavaSpelRefToKtAnnotated_JavaSpelRefToKtAnnotated() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("ultimate/testData/spring/core/rename/javaSpelRefToKtAnnotated/javaSpelRefToKtAnnotated.test");
        doTest(fileName);
    }

    @TestMetadata("ktSpelRefToJava/ktSpelRefToJava.test")
    public void testKtSpelRefToJava_KtSpelRefToJava() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("ultimate/testData/spring/core/rename/ktSpelRefToJava/ktSpelRefToJava.test");
        doTest(fileName);
    }

    @TestMetadata("ktSpelRefToJavaAnnotated/ktSpelRefToJavaAnnotated.test")
    public void testKtSpelRefToJavaAnnotated_KtSpelRefToJavaAnnotated() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("ultimate/testData/spring/core/rename/ktSpelRefToJavaAnnotated/ktSpelRefToJavaAnnotated.test");
        doTest(fileName);
    }

    @TestMetadata("ktSpelRefToKt/ktSpelRefToKt.test")
    public void testKtSpelRefToKt_KtSpelRefToKt() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("ultimate/testData/spring/core/rename/ktSpelRefToKt/ktSpelRefToKt.test");
        doTest(fileName);
    }

    @TestMetadata("ktSpelRefToKtAnnotated/ktSpelRefToKtAnnotated.test")
    public void testKtSpelRefToKtAnnotated_KtSpelRefToKtAnnotated() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("ultimate/testData/spring/core/rename/ktSpelRefToKtAnnotated/ktSpelRefToKtAnnotated.test");
        doTest(fileName);
    }
}
